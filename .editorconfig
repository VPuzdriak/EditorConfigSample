root = true

# All files
[*]
indent_style = space
max_line_length = 200 # Increase or remove if possible

# Xml files
[*.xml]
indent_size = 2

# C# files
[*.cs]

#### Core EditorConfig Options ####

# Indentation and spacing
indent_size = 2
tab_width = 2

# New line preferences
end_of_line = crlf
insert_final_newline = true

#### .NET Coding Conventions ####
[*.{cs,vb}]

# Organize usings
dotnet_separate_import_directive_groups = true # Group using directives
dotnet_sort_system_directives_first = true # Put system directives first and sort them

# this. and Me. preferences
dotnet_style_qualification_for_event = false:error # Do not use 'this.' or 'Me.' for events
dotnet_style_qualification_for_field = false:error # Do not use 'this.' or 'Me.' for fields
dotnet_style_qualification_for_method = false:error # Do not use 'this.' or 'Me.' for methods
dotnet_style_qualification_for_property = false:error # Do not use 'this.' or 'Me.' for properties

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:error # Use int not Int32 for variables
dotnet_style_predefined_type_for_member_access = true:error # Use int not Int32 for members

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:error # Require explicit accessibility modifiers in classes

# Expression-level preferences
dotnet_style_coalesce_expression = true:error # Use a null-coalescing expression instead of ternary operator
dotnet_style_collection_initializer = true:suggestion # Use [] instead of new List<T> { } if possible
dotnet_style_explicit_tuple_names = true:error # Use explicit tuple names instead of Item1, Item2...
dotnet_style_null_propagation = true:error # Use ?. operator instead of null checks 
dotnet_style_object_initializer = true:suggestion # Use {} instead of assigning properties one by one. Up to developer to decide
dotnet_style_prefer_auto_properties = true:error # Use auto properties when possible
dotnet_style_prefer_compound_assignment = true:suggestion # Prefer x += 5 instead of x = x + 5;
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion # Prefer x = y ? a : b over if (y) x = a; else x = b;
dotnet_style_prefer_conditional_expression_over_return = true:suggestion # Prefer return y ? a : b over if (y) return a; else return b; 
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion # Use var anon = new { age, name }; instead of var anon = new { age = age, name = name }; Up to developer to decide
dotnet_style_prefer_inferred_tuple_names = true:suggestion # Use var tuple = (age, name); instead of var tuple = (age: age, name: name); Up to developer to decide
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion # Use x is null instead of object.ReferenceEquals(x, null). May not be applicable in .net standard 2.0
dotnet_style_prefer_simplified_boolean_expressions = true:error # Use var result1 = M1() && M2(); instead of var result1 = M1() == true && M2() == true;
dotnet_style_prefer_simplified_interpolation = true:error # Use var str = $"prefix {someValue} suffix"; instead of var str = $"prefix {someValue.ToString()} suffix";

# Field preferences
dotnet_style_readonly_field = true:error # Use readonly keyword when possible

# Parameter preferences
dotnet_code_quality_unused_parameters = non_public:suggestion # Report unused parameters. Does it work???

#### C# Coding Conventions ####
[*.cs]

# var preferences
csharp_style_var_elsewhere = true:silent # Have a look. Check if works???
csharp_style_var_for_built_in_types = true:silent
csharp_style_var_when_type_is_apparent = true:error

# Expression-bodied members
csharp_style_expression_bodied_accessors = true:silent # Prefer public int Age { get => _age * 2; set => _age = value; } instead of public int Age { get { return _age * 2; } set { _age = value; } }
csharp_style_expression_bodied_constructors = false:silent # Prefer normal ctor instead of ctor() => { }
csharp_style_expression_bodied_indexers = true:silent # Prefer public T this[int i] => _values[i]; instead of public T this[int i] { get { return _values[i]; } }
csharp_style_expression_bodied_lambdas = true:suggestion # Prefer Func<int, int> square = x => x * x; instead of Func<int, int> square = (x) => { return x * x; };
csharp_style_expression_bodied_local_functions = false:silent # Prefer normal local functions instead of localFunc() => { }
csharp_style_expression_bodied_methods = false:silent # Prefer normal methods instead of Method() => { }
csharp_style_expression_bodied_operators = false:silent # Prefer normal operators instead of operator + => { }
csharp_style_expression_bodied_properties = true:error # Prefer public int Age => _age; instead of public int Age { get { return _age; } }

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:warning # Use if (obj is Person p) instead of if (obj as Person != null). May not be applicable in .net standard 2.0
csharp_style_pattern_matching_over_is_with_cast_check = true:warning # Use if (obj is Person p) instead of if (obj is Person) {var p = (Person)obj}. May not be applicable in .net standard 2.0
csharp_style_prefer_not_pattern = true:warning # Use obj is not Person instead of !(obj is Person). May not be applicable in .net standard 2.0
csharp_style_prefer_pattern_matching = true:silent # Use pattern matching instead of if-else. May not be applicable in .net standard 2.0
csharp_style_prefer_switch_expression = true:suggestion # Use switch expression instead of switch statement. May not be applicable in .net standard 2.0

# Null-checking preferences
csharp_style_conditional_delegate_call = true:warning # Use _event?.Invoke() instead of if (_event != null) _event(); Up to developer to decide

# Modifier preferences
csharp_prefer_static_local_function = true:silent # Use static local functions when possible. May not be applicable in .net standard 2.0
csharp_preferred_modifier_order = public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async:error # Order of modifiers

# Code-block preferences
csharp_prefer_braces = true:error # Use braces for single-line statements
csharp_prefer_simple_using_statement = true:silent # Use using var reader = new StreamReader(); instead of using (var reader = new StreamReader()) {}; Up to developer to decide

# Expression-level preferences
csharp_prefer_simple_default_expression = true:warning # Use default instead of default(T).
csharp_style_deconstructed_variable_declaration = true:warning # Use var (x, y) = (1, 2); instead of var tuple = (1, 2); var x = tuple.Item1; var y = tuple.Item2;
csharp_style_inlined_variable_declaration = true:error # Use var x = 5; instead of var x; x = 5;
csharp_style_pattern_local_over_anonymous_function = true:silent # Prefer to use local function instead of a delegate 
csharp_style_prefer_index_operator = true:suggestion # Use [^2] instead of [array.Length - 2]. May not be applicable in .net standard 2.0 
csharp_style_prefer_range_operator = true:suggestion # Use var sub = sentence[0..^4]; instead of var sub = sentence.Substring(0, sentence.Length - 4); May not be applicable in .net standard 2.0
csharp_style_throw_expression = true:error # Use name ?? throw new ArgumentNullException(nameof(name)); instead of if (name == null) throw new ArgumentNullException("name");
csharp_style_unused_value_assignment_preference = discard_variable:error # Use _ = M(); instead of var _ = M(); Up to developer to decide
csharp_style_unused_value_expression_statement_preference = discard_variable:error # Use _ = M(); instead of M(); Up to developer to decide

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:error # Place using directives outside of namespace

#### C# Formatting Rules ####

# New line preferences
csharp_new_line_before_catch = true # Add new line before catch 
csharp_new_line_before_else = true # Add new line before else
csharp_new_line_before_finally = true # Add new line before finally
csharp_new_line_before_members_in_anonymous_types = true # Add new line before members in anonymous types
csharp_new_line_before_members_in_object_initializers = true # Add new line before members in object initializers. If set to true then it tries to use the whole line. EXCLUDE RULE IF POSSIBLE.
csharp_new_line_before_open_brace = none # Add new line before open brace
csharp_new_line_between_query_expression_clauses = true # Add new line between query expression clauses

# Indentation preferences
csharp_indent_block_contents = true # Indent block contents
csharp_indent_braces = false # If true - braces are indented with the code block
csharp_indent_case_contents = true # If true - the case statement content will be indented
csharp_indent_case_contents_when_block = false # If true - the case statement content will be indented when there is a block
csharp_indent_labels = one_less_than_current # Indent labels one less than the current indentation
csharp_indent_switch_labels = true # If true - the case statement will be indented

# Space preferences
csharp_space_after_cast = false # Use (int) x instead of (int)x  
csharp_space_after_colon_in_inheritance_clause = true # Use class A : B instead of class A :B
csharp_space_after_comma = true # Use var x = new[] { 1, 2, 3 }; instead of var x = new[] {1,2,3}; 
csharp_space_after_dot = false # Use x.ToString() instead of x. ToString()
csharp_space_after_keywords_in_control_flow_statements = true # Use if (true) instead of if(true)
csharp_space_after_semicolon_in_for_statement = true # Use for (int i = 0; i < 10; i++) instead of for (int i = 0;i < 10;i++)
csharp_space_around_binary_operators = before_and_after # Use x + y instead of x+y
csharp_space_around_declaration_statements = false # Use int x = 5; instead of int x=5;
csharp_space_before_colon_in_inheritance_clause = true # Use class A : B instead of class A: B 
csharp_space_before_comma = false # Use var x = new[] { 1 , 2 , 3 }; instead of var x = new[] {1, 2, 3};
csharp_space_before_dot = false # Use x .ToString() instead of x.ToString()
csharp_space_before_open_square_brackets = false # Use int [] x instead of int[] x
csharp_space_before_semicolon_in_for_statement = false # Use for (int i = 0 ; i < 10 ; i++) instead of for (int i = 0; i < 10; i++)
csharp_space_between_empty_square_brackets = false # Use int[ ] x = new int[ ] { }; instead of int[] x = new int[] {};
csharp_space_between_method_call_empty_parameter_list_parentheses = false # Use M( ) instead of M()
csharp_space_between_method_call_name_and_opening_parenthesis = false # Use M (x) instead of M(x)
csharp_space_between_method_call_parameter_list_parentheses = false # Use M( x, y ) instead of M(x,y)
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false # Use void M( ) instead of void M()
csharp_space_between_method_declaration_name_and_open_parenthesis = false # Use void M (x) instead of void M(x)
csharp_space_between_method_declaration_parameter_list_parentheses = false # Use void M ( x, y ) instead of void M(x,y)
csharp_space_between_square_brackets = false # Use numbers[ 0 ] instead of numbers[0]

# Wrapping preferences
csharp_preserve_single_line_blocks = true # Do not wrap single line blocks 
csharp_preserve_single_line_statements = false # Do not wrap single line statements
csharp_place_attribute_on_same_line = false # Place attributes on the same line. CHECK: exclude rule from profile if possible

#### Naming styles ####
[*.{cs,vb}]

# Naming rules

dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.severity = error # Types and namespaces should be PascalCase
dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.symbols = types_and_namespaces # Apply to types and namespaces 
dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.style = pascalcase # Naming style is PascalCase 

dotnet_naming_rule.interfaces_should_be_ipascalcase.severity = error # Interfaces should be IPascalCase
dotnet_naming_rule.interfaces_should_be_ipascalcase.symbols = interfaces # Apply to interfaces
dotnet_naming_rule.interfaces_should_be_ipascalcase.style = ipascalcase # Naming style is IPascalCase

dotnet_naming_rule.type_parameters_should_be_tpascalcase.severity = error # Type parameters should be TPascalCase
dotnet_naming_rule.type_parameters_should_be_tpascalcase.symbols = type_parameters # Apply to type parameters
dotnet_naming_rule.type_parameters_should_be_tpascalcase.style = tpascalcase # Naming style is TPascalCase

dotnet_naming_rule.methods_should_be_pascalcase.severity = error # Methods should be PascalCase. CHECK if the custom formatting can be applied. I.G. GetTVP().
dotnet_naming_rule.methods_should_be_pascalcase.symbols = methods # Apply to methods
dotnet_naming_rule.methods_should_be_pascalcase.style = pascalcase # Naming style is PascalCase

dotnet_naming_rule.properties_should_be_pascalcase.severity = error # Properties should be PascalCase. Suggestion because of JSON serialization
dotnet_naming_rule.properties_should_be_pascalcase.symbols = properties # Apply to properties
dotnet_naming_rule.properties_should_be_pascalcase.style = pascalcase # Naming style is PascalCase

dotnet_naming_rule.events_should_be_pascalcase.severity = error # Events should be PascalCase
dotnet_naming_rule.events_should_be_pascalcase.symbols = events # Apply to events
dotnet_naming_rule.events_should_be_pascalcase.style = pascalcase # Naming style is PascalCase

dotnet_naming_rule.local_variables_should_be_camelcase.severity = error # Local variables should be camelCase
dotnet_naming_rule.local_variables_should_be_camelcase.symbols = local_variables # Apply to local variables
dotnet_naming_rule.local_variables_should_be_camelcase.style = camelcase # Naming style is camelCase

dotnet_naming_rule.local_constants_should_be_camelcase.severity = error # Local constants should be camelCase
dotnet_naming_rule.local_constants_should_be_camelcase.symbols = local_constants # Apply to local constants
dotnet_naming_rule.local_constants_should_be_camelcase.style = camelcase # Naming style is camelCase

dotnet_naming_rule.parameters_should_be_camelcase.severity = error # Parameters should be camelCase 
dotnet_naming_rule.parameters_should_be_camelcase.symbols = parameters # Apply to parameters
dotnet_naming_rule.parameters_should_be_camelcase.style = camelcase # Naming style is camelCase

dotnet_naming_rule.public_fields_should_be_pascalcase.severity = error # Public fields should be PascalCase
dotnet_naming_rule.public_fields_should_be_pascalcase.symbols = public_fields # Apply to public fields
dotnet_naming_rule.public_fields_should_be_pascalcase.style = pascalcase # Naming style is PascalCase

dotnet_naming_rule.private_fields_should_be__camelcase.severity = error # Private fields should be camelCase
dotnet_naming_rule.private_fields_should_be__camelcase.symbols = private_fields # Apply to private fields
dotnet_naming_rule.private_fields_should_be__camelcase.style = _camelcase # Naming style is _camelCase

dotnet_naming_rule.private_static_fields_should_be_pascalcase.severity = error # Private static fields should be PascalCase
dotnet_naming_rule.private_static_fields_should_be_pascalcase.symbols = private_static_fields # Apply to private static fields
dotnet_naming_rule.private_static_fields_should_be_pascalcase.style = _camelcase # Naming style is PascalCase

dotnet_naming_rule.public_constant_fields_should_be_pascalcase.severity = error # Public constant fields should be PascalCase
dotnet_naming_rule.public_constant_fields_should_be_pascalcase.symbols = public_constant_fields # Apply to public constant fields
dotnet_naming_rule.public_constant_fields_should_be_pascalcase.style = pascalcase # Naming style is PascalCase

dotnet_naming_rule.private_constant_fields_should_be_pascalcase.severity = error # Private constant fields should be PascalCase
dotnet_naming_rule.private_constant_fields_should_be_pascalcase.symbols = private_constant_fields # Apply to private constant fields
dotnet_naming_rule.private_constant_fields_should_be_pascalcase.style = _camelcase # Naming style is PascalCase

dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.severity = error # Public static readonly fields should be PascalCase
dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.symbols = public_static_readonly_fields # Apply to public static readonly fields
dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.style = pascalcase # Naming style is PascalCase

dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.severity = error # Private static readonly fields should be PascalCase
dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.symbols = private_static_readonly_fields # Apply to private static readonly fields
dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.style = _camelcase # Naming style is PascalCase

dotnet_naming_rule.enums_should_be_pascalcase.severity = error # Enums should be PascalCase
dotnet_naming_rule.enums_should_be_pascalcase.symbols = enums # Apply to enums
dotnet_naming_rule.enums_should_be_pascalcase.style = pascalcase # Naming style is PascalCase

dotnet_naming_rule.local_functions_should_be_pascalcase.severity = error # Local functions should be PascalCase
dotnet_naming_rule.local_functions_should_be_pascalcase.symbols = local_functions # Apply to local functions
dotnet_naming_rule.local_functions_should_be_pascalcase.style = pascalcase # Naming style is PascalCase

dotnet_naming_rule.non_field_members_should_be_pascalcase.severity = error # Non-field members should be PascalCase. WE DON'T KNOW WHAT THIS IS
dotnet_naming_rule.non_field_members_should_be_pascalcase.symbols = non_field_members # Apply to non-field members
dotnet_naming_rule.non_field_members_should_be_pascalcase.style = pascalcase # Naming style is PascalCase

# Symbol specifications

dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_symbols.interfaces.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interfaces.required_modifiers =

dotnet_naming_symbols.enums.applicable_kinds = enum
dotnet_naming_symbols.enums.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.enums.required_modifiers =

dotnet_naming_symbols.events.applicable_kinds = event
dotnet_naming_symbols.events.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.events.required_modifiers =

dotnet_naming_symbols.methods.applicable_kinds = method
dotnet_naming_symbols.methods.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.methods.required_modifiers =

dotnet_naming_symbols.properties.applicable_kinds = property
dotnet_naming_symbols.properties.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.properties.required_modifiers =

dotnet_naming_symbols.public_fields.applicable_kinds = field
dotnet_naming_symbols.public_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_fields.required_modifiers =

dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_fields.required_modifiers =

dotnet_naming_symbols.private_static_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_static_fields.required_modifiers = static

dotnet_naming_symbols.types_and_namespaces.applicable_kinds = namespace, class, struct, interface, enum
dotnet_naming_symbols.types_and_namespaces.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types_and_namespaces.required_modifiers =

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers =

dotnet_naming_symbols.type_parameters.applicable_kinds = namespace
dotnet_naming_symbols.type_parameters.applicable_accessibilities = *
dotnet_naming_symbols.type_parameters.required_modifiers =

dotnet_naming_symbols.private_constant_fields.applicable_kinds = field
dotnet_naming_symbols.private_constant_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_constant_fields.required_modifiers = const

dotnet_naming_symbols.local_variables.applicable_kinds = local
dotnet_naming_symbols.local_variables.applicable_accessibilities = local
dotnet_naming_symbols.local_variables.required_modifiers =

dotnet_naming_symbols.local_constants.applicable_kinds = local
dotnet_naming_symbols.local_constants.applicable_accessibilities = local
dotnet_naming_symbols.local_constants.required_modifiers = const

dotnet_naming_symbols.parameters.applicable_kinds = parameter
dotnet_naming_symbols.parameters.applicable_accessibilities = *
dotnet_naming_symbols.parameters.required_modifiers =

dotnet_naming_symbols.public_constant_fields.applicable_kinds = field
dotnet_naming_symbols.public_constant_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_constant_fields.required_modifiers = const

dotnet_naming_symbols.public_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.public_static_readonly_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_static_readonly_fields.required_modifiers = readonly, static

dotnet_naming_symbols.private_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_readonly_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_static_readonly_fields.required_modifiers = readonly, static

dotnet_naming_symbols.local_functions.applicable_kinds = local_function
dotnet_naming_symbols.local_functions.applicable_accessibilities = *
dotnet_naming_symbols.local_functions.required_modifiers =

# Naming styles

dotnet_naming_style.pascalcase.required_prefix =
dotnet_naming_style.pascalcase.required_suffix =
dotnet_naming_style.pascalcase.word_separator =
dotnet_naming_style.pascalcase.capitalization = pascal_case

dotnet_naming_style.ipascalcase.required_prefix = I
dotnet_naming_style.ipascalcase.required_suffix =
dotnet_naming_style.ipascalcase.word_separator =
dotnet_naming_style.ipascalcase.capitalization = pascal_case

dotnet_naming_style.tpascalcase.required_prefix = T
dotnet_naming_style.tpascalcase.required_suffix =
dotnet_naming_style.tpascalcase.word_separator =
dotnet_naming_style.tpascalcase.capitalization = pascal_case

dotnet_naming_style._camelcase.required_prefix = _
dotnet_naming_style._camelcase.required_suffix =
dotnet_naming_style._camelcase.word_separator =
dotnet_naming_style._camelcase.capitalization = camel_case

dotnet_naming_style.camelcase.required_prefix =
dotnet_naming_style.camelcase.required_suffix =
dotnet_naming_style.camelcase.word_separator =
dotnet_naming_style.camelcase.capitalization = camel_case

# ConfigureAwait(false)
dotnet_diagnostic.CA2007.severity = error
dotnet_code_quality.CA2007.output_kind = DynamicallyLinkedLibrary
dotnet_code_quality.CA2007.exclude_async_void_methods = true

# Ignore warnings
dotnet_diagnostic.CS1591.severity = none # Missing XML comment for publicly visible type or member
dotnet_diagnostic.SYSLIB1006.severity = none # Same Log Event Id in the same class

# Explicitly opt-in.
# If not-opt-in explicitly - then we have error in editor, but not on build
dotnet_diagnostic.IDE0058.severity = none # Expression value is never used
dotnet_diagnostic.IDE0044.severity = error # Require readonly where possible